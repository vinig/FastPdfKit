<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/MFDocumentViewController.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/MFDocumentViewController</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>
			
			<NodeRef refid="4"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/MFDocumentViewController/documentDelegate</TokenIdentifier>
			<Abstract type="html">This property let you add the main DocumentViewControllerDelegate.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>@property (assign) NSObject&lt;MFDocumentViewControllerDelegate&gt; *documentDelegate</Declaration>
			
			
			<Anchor>//api/name/documentDelegate</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/documentDelegate</TokenIdentifier>
			<Abstract type="html">This property let you add the main DocumentViewControllerDelegate.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (NSObject&lt;MFDocumentViewControllerDelegate&gt; *)documentDelegate</Declaration>
			
			
			<Anchor>//api/name/documentDelegate</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/setDocumentDelegate:</TokenIdentifier>
			<Abstract type="html">This property let you add the main DocumentViewControllerDelegate.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (void)setDocumentDelegate:(NSObject&lt;MFDocumentViewControllerDelegate&gt; *)val</Declaration>
			
			
			<Anchor>//api/name/documentDelegate</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/addDocumentDelegate:</TokenIdentifier>
			<Abstract type="html">If you need to register objects as DocumentViewControllerDelegate you can add them using this method.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (void)addDocumentDelegate:(NSObject&lt;MFDocumentViewControllerDelegate&gt; *)delegate</Declaration>
			
			
			<Anchor>//api/name/addDocumentDelegate:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/removeDocumentDelegate:</TokenIdentifier>
			<Abstract type="html">If you have more than one DocumentViewControllerDelegate you can remove any of them with this method.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (void)removeDocumentDelegate:(NSObject&lt;MFDocumentViewControllerDelegate&gt; *)delegate</Declaration>
			
			
			<Anchor>//api/name/removeDocumentDelegate:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/MFDocumentViewController/directionalLockEnabled</TokenIdentifier>
			<Abstract type="html">This property enable or disable the directional lock in the inner (document)
scroll view.
Default is NO.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, getter=isDirectionLockEnabled) BOOL directionalLockEnabled</Declaration>
			
			
			<Anchor>//api/name/directionalLockEnabled</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/isDirectionLockEnabled</TokenIdentifier>
			<Abstract type="html">This property enable or disable the directional lock in the inner (document)
scroll view.
Default is NO.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (BOOL)isDirectionLockEnabled</Declaration>
			
			
			<Anchor>//api/name/directionalLockEnabled</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/setDirectionalLockEnabled:</TokenIdentifier>
			<Abstract type="html">This property enable or disable the directional lock in the inner (document)
scroll view.
Default is NO.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (void)setDirectionalLockEnabled:(BOOL)val</Declaration>
			
			
			<Anchor>//api/name/directionalLockEnabled</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/MFDocumentViewController/useTiledOverlayView</TokenIdentifier>
			<Abstract type="html">This property will enable an CATiledLayer version of the overlay view. This
means overlay drawables will be drawn sharp, no matter the zoom of the scroll
view.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>@property (readwrite) BOOL useTiledOverlayView</Declaration>
			
			
			<Anchor>//api/name/useTiledOverlayView</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/useTiledOverlayView</TokenIdentifier>
			<Abstract type="html">This property will enable an CATiledLayer version of the overlay view. This
means overlay drawables will be drawn sharp, no matter the zoom of the scroll
view.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (BOOL)useTiledOverlayView</Declaration>
			
			
			<Anchor>//api/name/useTiledOverlayView</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/setUseTiledOverlayView:</TokenIdentifier>
			<Abstract type="html">This property will enable an CATiledLayer version of the overlay view. This
means overlay drawables will be drawn sharp, no matter the zoom of the scroll
view.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (void)setUseTiledOverlayView:(BOOL)val</Declaration>
			
			
			<Anchor>//api/name/useTiledOverlayView</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/MFDocumentViewController/showHorizontalScroller</TokenIdentifier>
			<Abstract type="html">Use this property to hide or show the horizontal scroller under the pages.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) BOOL showHorizontalScroller</Declaration>
			
			
			<Anchor>//api/name/showHorizontalScroller</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/showHorizontalScroller</TokenIdentifier>
			<Abstract type="html">Use this property to hide or show the horizontal scroller under the pages.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (BOOL)showHorizontalScroller</Declaration>
			
			
			<Anchor>//api/name/showHorizontalScroller</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/setShowHorizontalScroller:</TokenIdentifier>
			<Abstract type="html">Use this property to hide or show the horizontal scroller under the pages.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (void)setShowHorizontalScroller:(BOOL)val</Declaration>
			
			
			<Anchor>//api/name/showHorizontalScroller</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/MFDocumentViewController/showShadow</TokenIdentifier>
			<Abstract type="html">Set this flag to NO if you don't want the dropdown shadow under the pages.
Default is YES.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) BOOL showShadow</Declaration>
			
			
			<Anchor>//api/name/showShadow</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/showShadow</TokenIdentifier>
			<Abstract type="html">Set this flag to NO if you don't want the dropdown shadow under the pages.
Default is YES.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (BOOL)showShadow</Declaration>
			
			
			<Anchor>//api/name/showShadow</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/setShowShadow:</TokenIdentifier>
			<Abstract type="html">Set this flag to NO if you don't want the dropdown shadow under the pages.
Default is YES.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (void)setShowShadow:(BOOL)val</Declaration>
			
			
			<Anchor>//api/name/showShadow</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/MFDocumentViewController/padding</TokenIdentifier>
			<Abstract type="html">Set the amount of minimum padding between the pages and the screen edge.
Default is 5.0. Values are clipped between 0 and 100.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) CGFloat padding</Declaration>
			
			
			<Anchor>//api/name/padding</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/padding</TokenIdentifier>
			<Abstract type="html">Set the amount of minimum padding between the pages and the screen edge.
Default is 5.0. Values are clipped between 0 and 100.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (CGFloat)padding</Declaration>
			
			
			<Anchor>//api/name/padding</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/setPadding:</TokenIdentifier>
			<Abstract type="html">Set the amount of minimum padding between the pages and the screen edge.
Default is 5.0. Values are clipped between 0 and 100.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (void)setPadding:(CGFloat)val</Declaration>
			
			
			<Anchor>//api/name/padding</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/addOverlayDataSource:</TokenIdentifier>
			<Abstract type="html">Add and remove an Overlay Datasource for Drawables and Touchables.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (void)addOverlayDataSource:(id&lt;MFDocumentOverlayDataSource&gt;)ods</Declaration>
			
			
			<Anchor>//api/name/addOverlayDataSource:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/MFDocumentViewController/fpkAnnotationsEnabled</TokenIdentifier>
			<Abstract type="html">Enable or disable FPK Annotations parsing at page load. Set it to NO if you
don't use FPK Annotations and experience freezing while scrolling the pages.
Default is YES (enabled).</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) BOOL fpkAnnotationsEnabled</Declaration>
			
			
			<Anchor>//api/name/fpkAnnotationsEnabled</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/fpkAnnotationsEnabled</TokenIdentifier>
			<Abstract type="html">Enable or disable FPK Annotations parsing at page load. Set it to NO if you
don't use FPK Annotations and experience freezing while scrolling the pages.
Default is YES (enabled).</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (BOOL)fpkAnnotationsEnabled</Declaration>
			
			
			<Anchor>//api/name/fpkAnnotationsEnabled</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/setFpkAnnotationsEnabled:</TokenIdentifier>
			<Abstract type="html">Enable or disable FPK Annotations parsing at page load. Set it to NO if you
don't use FPK Annotations and experience freezing while scrolling the pages.
Default is YES (enabled).</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (void)setFpkAnnotationsEnabled:(BOOL)val</Declaration>
			
			
			<Anchor>//api/name/fpkAnnotationsEnabled</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/addOverlayViewDataSource:</TokenIdentifier>
			<Abstract type="html">Add an Overlay View Datasource for overlay UIViews.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (void)addOverlayViewDataSource:(id&lt;FPKOverlayViewDataSource&gt;)ovds</Declaration>
			
			
			<Anchor>//api/name/addOverlayViewDataSource:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/removeOverlayViewDataSource:</TokenIdentifier>
			<Abstract type="html">Remove an Overlay View Datasource for overlay UIViews.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (void)removeOverlayViewDataSource:(id&lt;FPKOverlayViewDataSource&gt;)ovds</Declaration>
			
			
			<Anchor>//api/name/removeOverlayViewDataSource:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/reloadOverlay</TokenIdentifier>
			<Abstract type="html">This method will provoke the redraw of the overlay. Overlay Datasources will be
asked to provide drawables.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (void)reloadOverlay</Declaration>
			
			
			<Anchor>//api/name/reloadOverlay</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/zoomLevelForAnnotationRect:ofPage:</TokenIdentifier>
			<Abstract type="html">This will return the appropriate zoom level to perfectly zoom onto an annotation.
If return 0, there's no available page data to compute the zoom yet.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (float)zoomLevelForAnnotationRect:(CGRect)rect ofPage:(NSUInteger)page</Declaration>
			
			
			<Anchor>//api/name/zoomLevelForAnnotationRect:ofPage:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/zoomScale</TokenIdentifier>
			<Abstract type="html">Return the zoom scale of the page scroll view.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (float)zoomScale</Declaration>
			
			
			<Anchor>//api/name/zoomScale</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/zoomOffset</TokenIdentifier>
			<Abstract type="html">Return the offset of the page scroll view.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (CGPoint)zoomOffset</Declaration>
			
			
			<Anchor>//api/name/zoomOffset</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/leftPage</TokenIdentifier>
			<Abstract type="html">This method will return the page number of the left page displayed. If the mode
is single page, the left page number is the current page.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (NSUInteger)leftPage</Declaration>
			
			
			<Anchor>//api/name/leftPage</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/rightPage</TokenIdentifier>
			<Abstract type="html">This method will return the page number of the right page displayed. If the mode
is single, right page number is invalid.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (NSUInteger)rightPage</Declaration>
			
			
			<Anchor>//api/name/rightPage</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/MFDocumentViewController/startingPage</TokenIdentifier>
			<Abstract type="html">Set the starting page of the document. It is valid only after initialization
and before the view is displayed on the screen. Tipically you want to set this
just after the init of the viewController.
Default is 1.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) NSUInteger startingPage</Declaration>
			
			
			<Anchor>//api/name/startingPage</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/startingPage</TokenIdentifier>
			<Abstract type="html">Set the starting page of the document. It is valid only after initialization
and before the view is displayed on the screen. Tipically you want to set this
just after the init of the viewController.
Default is 1.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (NSUInteger)startingPage</Declaration>
			
			
			<Anchor>//api/name/startingPage</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/setStartingPage:</TokenIdentifier>
			<Abstract type="html">Set the starting page of the document. It is valid only after initialization
and before the view is displayed on the screen. Tipically you want to set this
just after the init of the viewController.
Default is 1.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (void)setStartingPage:(NSUInteger)val</Declaration>
			
			
			<Anchor>//api/name/startingPage</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/MFDocumentViewController/pageFlipOnEdgeTouchEnabled</TokenIdentifier>
			<Abstract type="html">Enable the page flip when the user touch the edges of the screen.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>@property (assign, readwrite, getter=isPageFlipOnEdgeTouchEnabled) BOOL pageFlipOnEdgeTouchEnabled</Declaration>
			
			
			<Anchor>//api/name/pageFlipOnEdgeTouchEnabled</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/isPageFlipOnEdgeTouchEnabled</TokenIdentifier>
			<Abstract type="html">Enable the page flip when the user touch the edges of the screen.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (BOOL)isPageFlipOnEdgeTouchEnabled</Declaration>
			
			
			<Anchor>//api/name/pageFlipOnEdgeTouchEnabled</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/setPageFlipOnEdgeTouchEnabled:</TokenIdentifier>
			<Abstract type="html">Enable the page flip when the user touch the edges of the screen.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (void)setPageFlipOnEdgeTouchEnabled:(BOOL)val</Declaration>
			
			
			<Anchor>//api/name/pageFlipOnEdgeTouchEnabled</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/setEdgeFlipWidth:</TokenIdentifier>
			<Abstract type="html">Set and get the percentage of the screen associated with the page flip on edge
touch action. Default value is 0.1, this mean that the 10% of the width of the
screen on either side will receive such events. Values are clipped between 0.0
and 0.5 to prevent overlap.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (void)setEdgeFlipWidth:(CGFloat)edgeFlipWidth</Declaration>
			
			
			<Anchor>//api/name/setEdgeFlipWidth:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/edgeFlipWidth</TokenIdentifier>
			<Abstract type="html">Get the edge flip width</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (CGFloat)edgeFlipWidth</Declaration>
			
			
			<Anchor>//api/name/edgeFlipWidth</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/MFDocumentViewController/defaultEdgeFlipWidth</TokenIdentifier>
			<Abstract type="html">Default value to wich the current value will be reset to after each page change.
Default is 0.1.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) CGFloat defaultEdgeFlipWidth</Declaration>
			
			
			<Anchor>//api/name/defaultEdgeFlipWidth</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/defaultEdgeFlipWidth</TokenIdentifier>
			<Abstract type="html">Default value to wich the current value will be reset to after each page change.
Default is 0.1.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (CGFloat)defaultEdgeFlipWidth</Declaration>
			
			
			<Anchor>//api/name/defaultEdgeFlipWidth</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/setDefaultEdgeFlipWidth:</TokenIdentifier>
			<Abstract type="html">Default value to wich the current value will be reset to after each page change.
Default is 0.1.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (void)setDefaultEdgeFlipWidth:(CGFloat)val</Declaration>
			
			
			<Anchor>//api/name/defaultEdgeFlipWidth</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/MFDocumentViewController/zoomInOnDoubleTapEnabled</TokenIdentifier>
			<Abstract type="html">Enabled the zoom in when the user double tap on the screen.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>@property (assign, readwrite, getter=isZoomInOnDoubleTapEnabled) BOOL zoomInOnDoubleTapEnabled</Declaration>
			
			
			<Anchor>//api/name/zoomInOnDoubleTapEnabled</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/isZoomInOnDoubleTapEnabled</TokenIdentifier>
			<Abstract type="html">Enabled the zoom in when the user double tap on the screen.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (BOOL)isZoomInOnDoubleTapEnabled</Declaration>
			
			
			<Anchor>//api/name/zoomInOnDoubleTapEnabled</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/setZoomInOnDoubleTapEnabled:</TokenIdentifier>
			<Abstract type="html">Enabled the zoom in when the user double tap on the screen.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (void)setZoomInOnDoubleTapEnabled:(BOOL)val</Declaration>
			
			
			<Anchor>//api/name/zoomInOnDoubleTapEnabled</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/MFDocumentViewController/documentInteractionEnabled</TokenIdentifier>
			<Abstract type="html">Enabled the document interaction.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>@property (assign, readwrite, getter=isDocumentInteractionEnabled) BOOL documentInteractionEnabled</Declaration>
			
			
			<Anchor>//api/name/documentInteractionEnabled</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/isDocumentInteractionEnabled</TokenIdentifier>
			<Abstract type="html">Enabled the document interaction.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (BOOL)isDocumentInteractionEnabled</Declaration>
			
			
			<Anchor>//api/name/documentInteractionEnabled</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/setDocumentInteractionEnabled:</TokenIdentifier>
			<Abstract type="html">Enabled the document interaction.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (void)setDocumentInteractionEnabled:(BOOL)val</Declaration>
			
			
			<Anchor>//api/name/documentInteractionEnabled</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/MFDocumentViewController/overlayEnabled</TokenIdentifier>
			<Abstract type="html">Enable or disable the display of overlay item over the document.
Default is disabled.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>@property (readwrite) BOOL overlayEnabled</Declaration>
			
			
			<Anchor>//api/name/overlayEnabled</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/overlayEnabled</TokenIdentifier>
			<Abstract type="html">Enable or disable the display of overlay item over the document.
Default is disabled.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (BOOL)overlayEnabled</Declaration>
			
			
			<Anchor>//api/name/overlayEnabled</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/setOverlayEnabled:</TokenIdentifier>
			<Abstract type="html">Enable or disable the display of overlay item over the document.
Default is disabled.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (void)setOverlayEnabled:(BOOL)val</Declaration>
			
			
			<Anchor>//api/name/overlayEnabled</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/MFDocumentViewController/legacyModeEnabled</TokenIdentifier>
			<Abstract type="html">Enabled or force the legacy mode, or let the app choose to enable it or not
depending on the device. Default is disabled.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>@property (readwrite) BOOL legacyModeEnabled</Declaration>
			
			
			<Anchor>//api/name/legacyModeEnabled</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/legacyModeEnabled</TokenIdentifier>
			<Abstract type="html">Enabled or force the legacy mode, or let the app choose to enable it or not
depending on the device. Default is disabled.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (BOOL)legacyModeEnabled</Declaration>
			
			
			<Anchor>//api/name/legacyModeEnabled</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/setLegacyModeEnabled:</TokenIdentifier>
			<Abstract type="html">Enabled or force the legacy mode, or let the app choose to enable it or not
depending on the device. Default is disabled.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (void)setLegacyModeEnabled:(BOOL)val</Declaration>
			
			
			<Anchor>//api/name/legacyModeEnabled</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/MFDocumentViewController/defaultMaxZoomScale</TokenIdentifier>
			<Abstract type="html">This is the default maximum magnification the pdf will zoom.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) float defaultMaxZoomScale</Declaration>
			
			
			<Anchor>//api/name/defaultMaxZoomScale</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/defaultMaxZoomScale</TokenIdentifier>
			<Abstract type="html">This is the default maximum magnification the pdf will zoom.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (float)defaultMaxZoomScale</Declaration>
			
			
			<Anchor>//api/name/defaultMaxZoomScale</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/setDefaultMaxZoomScale:</TokenIdentifier>
			<Abstract type="html">This is the default maximum magnification the pdf will zoom.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (void)setDefaultMaxZoomScale:(float)val</Declaration>
			
			
			<Anchor>//api/name/defaultMaxZoomScale</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/initWithDocumentManager:</TokenIdentifier>
			<Abstract type="html">Call this method to start working with the pdf.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (id)initWithDocumentManager:(MFDocumentManager *)aDocumentManager</Declaration>
			
			
			<Anchor>//api/name/initWithDocumentManager:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/automodeOnRotation</TokenIdentifier>
			<Abstract type="html">This metod enable or disable the automatic mode switching upon rotation. If
enabled, the page mode will be automatically changed to single page in portrait
and side-by-side (double) on landscape. Setting the mode manually will disable
the automode.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (BOOL)automodeOnRotation</Declaration>
			
			
			<Anchor>//api/name/automodeOnRotation</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/setAutomodeOnRotation:</TokenIdentifier>
			<Abstract type="html">Returns whether automode is enabled or not.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (void)setAutomodeOnRotation:(BOOL)automode</Declaration>
			
			
			<Anchor>//api/name/setAutomodeOnRotation:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/setMode:</TokenIdentifier>
			<Abstract type="html">Set how the pages are presented to the user. MFDocumentModeSingle present a
single page to the user, centered on the screen. MFDocumentModeDouble present
two pages side-by-side, as they would appear on a magazine or a books. This
will allow to preserve content split between the pages, for example a large
background image.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (void)setMode:(MFDocumentMode)newMode</Declaration>
			
			
			<Anchor>//api/name/setMode:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/setAutoMode:</TokenIdentifier>
			<Abstract type="html">Set the mode to which the document will automatically switch to upon rotation.
Pass MFDocumentAutoModeX values and not MFDocumentModeX values, since it is not
guaranteed to be the same.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (void)setAutoMode:(MFDocumentAutoMode)newAutoMode</Declaration>
			
			
			<Anchor>//api/name/setAutoMode:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/mode</TokenIdentifier>
			<Abstract type="html">Returns the current mode used to display the document.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (MFDocumentMode)mode</Declaration>
			
			
			<Anchor>//api/name/mode</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/setPage:</TokenIdentifier>
			<Abstract type="html">This metod will set the current page of the document and jump to the specified
page. Current page is used to determine bookmarks position. On side-by-side
(double) mode, it is usually the left-most page of the two.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (void)setPage:(NSUInteger)page</Declaration>
			
			
			<Anchor>//api/name/setPage:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/setPage:withZoomOfLevel:onRect:</TokenIdentifier>
			<Abstract type="html">This metod will set the current page of the document and jump to the specified
page, while trying to zoom in on the specified rect. Pass 0.0 as zoomLevel to
let the application try to calculate the appropriate zoom level to fit the
rectangle on screen.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (void)setPage:(NSUInteger)page withZoomOfLevel:(float)zoomLevel onRect:(CGRect)rect</Declaration>
			
			
			<Anchor>//api/name/setPage:withZoomOfLevel:onRect:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/page</TokenIdentifier>
			<Abstract type="html">Returns the current page of the document.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (NSUInteger)page</Declaration>
			
			
			<Anchor>//api/name/page</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/setLead:</TokenIdentifier>
			<Abstract type="html">This method set the lead used to show the pages in side-by-side (double) mode.
With MFDocumentLeadLeft, the cover will appear on the left side in side-by-side
mode, whereas with MFDocumentLeadRight will appear on the right side. Use this
method to keep pairing between pages for books and magazines. Single page mode
is not affected by this setting.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (void)setLead:(MFDocumentLead)newLead</Declaration>
			
			
			<Anchor>//api/name/setLead:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/lead</TokenIdentifier>
			<Abstract type="html">Returns the current lead used when presenting the document.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (MFDocumentLead)lead</Declaration>
			
			
			<Anchor>//api/name/lead</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/setDirection:</TokenIdentifier>
			<Abstract type="html">This method is used to set the page reading direction: left to right or right
to left.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (void)setDirection:(MFDocumentDirection)newDirection</Declaration>
			
			
			<Anchor>//api/name/setDirection:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/direction</TokenIdentifier>
			<Abstract type="html">Return the current direction used by the document.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (MFDocumentDirection)direction</Declaration>
			
			
			<Anchor>//api/name/direction</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/setAutozoomOnPageChange:</TokenIdentifier>
			<Abstract type="html">This method will turn on or off the autozoom feature. If on, the current zoom
level will be kept between pages, otherwise will be rest to 100% on page
change.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (void)setAutozoomOnPageChange:(BOOL)autozoom</Declaration>
			
			
			<Anchor>//api/name/setAutozoomOnPageChange:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/autozoomOnPageChange</TokenIdentifier>
			<Abstract type="html">Returns whether the autozoom feature is enabled or not.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (BOOL)autozoomOnPageChange</Declaration>
			
			
			<Anchor>//api/name/autozoomOnPageChange</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/moveToNextPage</TokenIdentifier>
			<Abstract type="html">This method will begin an animated transition to the next page, if available.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (void)moveToNextPage</Declaration>
			
			
			<Anchor>//api/name/moveToNextPage</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/moveToPreviousPage</TokenIdentifier>
			<Abstract type="html">This method will begin an animated transition to the previous page, if
available.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (void)moveToPreviousPage</Declaration>
			
			
			<Anchor>//api/name/moveToPreviousPage</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/cleanUp</TokenIdentifier>
			<Abstract type="html">Call this method rightly after dismissing this MFDocumentViewController
instance. It will release all the resources and stop the background threads.
Once this method has been called, the MFDocumentViewController instance cannot
be considered valid anymore and should be released.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (void)cleanUp</Declaration>
			
			
			<Anchor>//api/name/cleanUp</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/convertPoint:fromViewtoPage:</TokenIdentifier>
			<Abstract type="html">Convert a point from MFDocumentViewController's view space to page space.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (CGPoint)convertPoint:(CGPoint)point fromViewtoPage:(NSUInteger)page</Declaration>
			
			
			<Anchor>//api/name/convertPoint:fromViewtoPage:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/convertPoint:toViewFromPage:</TokenIdentifier>
			<Abstract type="html">Convert a point from page space to MFDocumentViewController's view space.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (CGPoint)convertPoint:(CGPoint)point toViewFromPage:(NSUInteger)page</Declaration>
			
			
			<Anchor>//api/name/convertPoint:toViewFromPage:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/convertRect:fromViewToPage:</TokenIdentifier>
			<Abstract type="html">Convert a rect from MFDocumentViewController's view space to page space.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (CGRect)convertRect:(CGRect)rect fromViewToPage:(NSUInteger)page</Declaration>
			
			
			<Anchor>//api/name/convertRect:fromViewToPage:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/convertRect:toViewFromPage:</TokenIdentifier>
			<Abstract type="html">Convert a rect from page space to MFDocumentViewController's view space.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (CGRect)convertRect:(CGRect)rect toViewFromPage:(NSUInteger)page</Declaration>
			
			
			<Anchor>//api/name/convertRect:toViewFromPage:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/convertPoint:fromOverlayToPage:</TokenIdentifier>
			<Abstract type="html">Convert a point from overlay space (the whole view that hold the both left and
right page, and that you can zoom in and scroll over) to page space.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (CGPoint)convertPoint:(CGPoint)point fromOverlayToPage:(NSUInteger)page</Declaration>
			
			
			<Anchor>//api/name/convertPoint:fromOverlayToPage:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/convertPoint:toOverlayFromPage:</TokenIdentifier>
			<Abstract type="html">Convert a point from page space to overlay space.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (CGPoint)convertPoint:(CGPoint)point toOverlayFromPage:(NSUInteger)page</Declaration>
			
			
			<Anchor>//api/name/convertPoint:toOverlayFromPage:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/convertRect:fromOverlayToPage:</TokenIdentifier>
			<Abstract type="html">Convert a rect from overlay space to page space.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (CGRect)convertRect:(CGRect)rect fromOverlayToPage:(NSUInteger)page</Declaration>
			
			
			<Anchor>//api/name/convertRect:fromOverlayToPage:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/convertRect:toOverlayFromPage:</TokenIdentifier>
			<Abstract type="html">Convert a ract from page to overlay space.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (CGRect)convertRect:(CGRect)rect toOverlayFromPage:(NSUInteger)page</Declaration>
			
			
			<Anchor>//api/name/convertRect:toOverlayFromPage:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/gesturesDisabled</TokenIdentifier>
			<Abstract type="html">Override in your subclass to toggle gesture recognizer on overlay views on and
off.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (BOOL)gesturesDisabled</Declaration>
			
			
			<Anchor>//api/name/gesturesDisabled</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/setScrollEnabled:</TokenIdentifier>
			<Abstract type="html">Set the paged scroll enabled or not. Useful to lock the user in the current
page during animations.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (void)setScrollEnabled:(BOOL)lock</Declaration>
			
			
			<Anchor>//api/name/setScrollEnabled:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/setMaximumZoomScale:</TokenIdentifier>
			<Abstract type="html">Set the maximum zoom scale for the pdf page.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (void)setMaximumZoomScale:(NSNumber *)scale</Declaration>
			
			
			<Anchor>//api/name/setMaximumZoomScale:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/MFDocumentViewController/previewsCount</TokenIdentifier>
			<Abstract type="html">Set the max number of preview images to use at any time. Call this before
presenting the MFDocumentViewController subclass. Default is 4, sweet spot is
3-4 and you should not exceed this number unless your target device are iPhone4
iPad2 or newer devices and/or your PDF are scarce of images.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) NSUInteger previewsCount</Declaration>
			
			
			<Anchor>//api/name/previewsCount</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/previewsCount</TokenIdentifier>
			<Abstract type="html">Set the max number of preview images to use at any time. Call this before
presenting the MFDocumentViewController subclass. Default is 4, sweet spot is
3-4 and you should not exceed this number unless your target device are iPhone4
iPad2 or newer devices and/or your PDF are scarce of images.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (NSUInteger)previewsCount</Declaration>
			
			
			<Anchor>//api/name/previewsCount</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/setPreviewsCount:</TokenIdentifier>
			<Abstract type="html">Set the max number of preview images to use at any time. Call this before
presenting the MFDocumentViewController subclass. Default is 4, sweet spot is
3-4 and you should not exceed this number unless your target device are iPhone4
iPad2 or newer devices and/or your PDF are scarce of images.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (void)setPreviewsCount:(NSUInteger)val</Declaration>
			
			
			<Anchor>//api/name/previewsCount</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/MFDocumentViewController/pagedScrollView</TokenIdentifier>
			<Abstract type="html">Access the inner paged scroll view.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>@property (readonly) UIScrollView *pagedScrollView</Declaration>
			
			
			<Anchor>//api/name/pagedScrollView</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/pagedScrollView</TokenIdentifier>
			<Abstract type="html">Access the inner paged scroll view.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (UIScrollView *)pagedScrollView</Declaration>
			
			
			<Anchor>//api/name/pagedScrollView</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentViewController/setPagedScrollView:</TokenIdentifier>
			<Abstract type="html">Access the inner paged scroll view.</Abstract>
			<DeclaredIn>MFDocumentViewController.h</DeclaredIn>			
			
			<Declaration>- (void)setPagedScrollView:(UIScrollView *)val</Declaration>
			
			
			<Anchor>//api/name/pagedScrollView</Anchor>
		</Token>
		
	</File>
</Tokens>